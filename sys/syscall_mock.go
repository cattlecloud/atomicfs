package sys

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	"syscall"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// SyscallMock implements Syscall
type SyscallMock struct {
	t minimock.Tester

	funcStat          func(s1 string, sp1 *syscall.Stat_t) (err error)
	inspectFuncStat   func(s1 string, sp1 *syscall.Stat_t)
	afterStatCounter  uint64
	beforeStatCounter uint64
	StatMock          mSyscallMockStat
}

// NewSyscallMock returns a mock for Syscall
func NewSyscallMock(t minimock.Tester) *SyscallMock {
	m := &SyscallMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.StatMock = mSyscallMockStat{mock: m}
	m.StatMock.callArgs = []*SyscallMockStatParams{}

	return m
}

type mSyscallMockStat struct {
	mock               *SyscallMock
	defaultExpectation *SyscallMockStatExpectation
	expectations       []*SyscallMockStatExpectation

	callArgs []*SyscallMockStatParams
	mutex    sync.RWMutex
}

// SyscallMockStatExpectation specifies expectation struct of the Syscall.Stat
type SyscallMockStatExpectation struct {
	mock    *SyscallMock
	params  *SyscallMockStatParams
	results *SyscallMockStatResults
	Counter uint64
}

// SyscallMockStatParams contains parameters of the Syscall.Stat
type SyscallMockStatParams struct {
	s1  string
	sp1 *syscall.Stat_t
}

// SyscallMockStatResults contains results of the Syscall.Stat
type SyscallMockStatResults struct {
	err error
}

// Expect sets up expected params for Syscall.Stat
func (mmStat *mSyscallMockStat) Expect(s1 string, sp1 *syscall.Stat_t) *mSyscallMockStat {
	if mmStat.mock.funcStat != nil {
		mmStat.mock.t.Fatalf("SyscallMock.Stat mock is already set by Set")
	}

	if mmStat.defaultExpectation == nil {
		mmStat.defaultExpectation = &SyscallMockStatExpectation{}
	}

	mmStat.defaultExpectation.params = &SyscallMockStatParams{s1, sp1}
	for _, e := range mmStat.expectations {
		if minimock.Equal(e.params, mmStat.defaultExpectation.params) {
			mmStat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStat.defaultExpectation.params)
		}
	}

	return mmStat
}

// Inspect accepts an inspector function that has same arguments as the Syscall.Stat
func (mmStat *mSyscallMockStat) Inspect(f func(s1 string, sp1 *syscall.Stat_t)) *mSyscallMockStat {
	if mmStat.mock.inspectFuncStat != nil {
		mmStat.mock.t.Fatalf("Inspect function is already set for SyscallMock.Stat")
	}

	mmStat.mock.inspectFuncStat = f

	return mmStat
}

// Return sets up results that will be returned by Syscall.Stat
func (mmStat *mSyscallMockStat) Return(err error) *SyscallMock {
	if mmStat.mock.funcStat != nil {
		mmStat.mock.t.Fatalf("SyscallMock.Stat mock is already set by Set")
	}

	if mmStat.defaultExpectation == nil {
		mmStat.defaultExpectation = &SyscallMockStatExpectation{mock: mmStat.mock}
	}
	mmStat.defaultExpectation.results = &SyscallMockStatResults{err}
	return mmStat.mock
}

//Set uses given function f to mock the Syscall.Stat method
func (mmStat *mSyscallMockStat) Set(f func(s1 string, sp1 *syscall.Stat_t) (err error)) *SyscallMock {
	if mmStat.defaultExpectation != nil {
		mmStat.mock.t.Fatalf("Default expectation is already set for the Syscall.Stat method")
	}

	if len(mmStat.expectations) > 0 {
		mmStat.mock.t.Fatalf("Some expectations are already set for the Syscall.Stat method")
	}

	mmStat.mock.funcStat = f
	return mmStat.mock
}

// When sets expectation for the Syscall.Stat which will trigger the result defined by the following
// Then helper
func (mmStat *mSyscallMockStat) When(s1 string, sp1 *syscall.Stat_t) *SyscallMockStatExpectation {
	if mmStat.mock.funcStat != nil {
		mmStat.mock.t.Fatalf("SyscallMock.Stat mock is already set by Set")
	}

	expectation := &SyscallMockStatExpectation{
		mock:   mmStat.mock,
		params: &SyscallMockStatParams{s1, sp1},
	}
	mmStat.expectations = append(mmStat.expectations, expectation)
	return expectation
}

// Then sets up Syscall.Stat return parameters for the expectation previously defined by the When method
func (e *SyscallMockStatExpectation) Then(err error) *SyscallMock {
	e.results = &SyscallMockStatResults{err}
	return e.mock
}

// Stat implements Syscall
func (mmStat *SyscallMock) Stat(s1 string, sp1 *syscall.Stat_t) (err error) {
	mm_atomic.AddUint64(&mmStat.beforeStatCounter, 1)
	defer mm_atomic.AddUint64(&mmStat.afterStatCounter, 1)

	if mmStat.inspectFuncStat != nil {
		mmStat.inspectFuncStat(s1, sp1)
	}

	mm_params := &SyscallMockStatParams{s1, sp1}

	// Record call args
	mmStat.StatMock.mutex.Lock()
	mmStat.StatMock.callArgs = append(mmStat.StatMock.callArgs, mm_params)
	mmStat.StatMock.mutex.Unlock()

	for _, e := range mmStat.StatMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmStat.StatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStat.StatMock.defaultExpectation.Counter, 1)
		mm_want := mmStat.StatMock.defaultExpectation.params
		mm_got := SyscallMockStatParams{s1, sp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStat.t.Errorf("SyscallMock.Stat got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStat.StatMock.defaultExpectation.results
		if mm_results == nil {
			mmStat.t.Fatal("No results are set for the SyscallMock.Stat")
		}
		return (*mm_results).err
	}
	if mmStat.funcStat != nil {
		return mmStat.funcStat(s1, sp1)
	}
	mmStat.t.Fatalf("Unexpected call to SyscallMock.Stat. %v %v", s1, sp1)
	return
}

// StatAfterCounter returns a count of finished SyscallMock.Stat invocations
func (mmStat *SyscallMock) StatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStat.afterStatCounter)
}

// StatBeforeCounter returns a count of SyscallMock.Stat invocations
func (mmStat *SyscallMock) StatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStat.beforeStatCounter)
}

// Calls returns a list of arguments used in each call to SyscallMock.Stat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStat *mSyscallMockStat) Calls() []*SyscallMockStatParams {
	mmStat.mutex.RLock()

	argCopy := make([]*SyscallMockStatParams, len(mmStat.callArgs))
	copy(argCopy, mmStat.callArgs)

	mmStat.mutex.RUnlock()

	return argCopy
}

// MinimockStatDone returns true if the count of the Stat invocations corresponds
// the number of defined expectations
func (m *SyscallMock) MinimockStatDone() bool {
	for _, e := range m.StatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStatCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStat != nil && mm_atomic.LoadUint64(&m.afterStatCounter) < 1 {
		return false
	}
	return true
}

// MinimockStatInspect logs each unmet expectation
func (m *SyscallMock) MinimockStatInspect() {
	for _, e := range m.StatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SyscallMock.Stat with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStatCounter) < 1 {
		if m.StatMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SyscallMock.Stat")
		} else {
			m.t.Errorf("Expected call to SyscallMock.Stat with params: %#v", *m.StatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStat != nil && mm_atomic.LoadUint64(&m.afterStatCounter) < 1 {
		m.t.Error("Expected call to SyscallMock.Stat")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SyscallMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockStatInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SyscallMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SyscallMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockStatDone()
}
